using Data;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace ReshitScheduler
{
    public partial class ViewAllTables : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            //if(Convert.ToString(ViewState["Generated"]) == "true")
            {
                this.ShowAllTables();
            }
            /*if (!this.IsPostBack || !IsInEditMode())
            {
                this.ShowAllTables();
            }*/
        }

        protected void Page_Init(object sender, EventArgs e)
        {
            //if (!IsPostBack || !IsInEditMode())
            //{
            //    //Generate initial textboxes 
            //    this.ShowAllTables();
            //}
        }

        private bool IsInEditMode()
        {
            DataTable dtTables = DBConnection.Instance().GetDataTableByQuery("select table_name from INFORMATION_SCHEMA.tables where table_schema = 'reshit'");
            foreach (DataRow CurrentTable in dtTables.Rows)
            {
                if((Session[CurrentTable["table_name"].ToString()] as GridView).EditIndex != -1)
                {
                    return true;
                }
            }
            return false;
        }

        private void ShowAllTables()
        {
            //if (Convert.ToString(ViewState["Generated"]) != "true")
            {
                DataSet dsAllTable = DBConnection.Instance().GetAllTables();
                foreach (DataTable dtCurrentTable in dsAllTable.Tables)
                {
                    GridView gvNewGridView = new GridView()
                    {
                        ID = dtCurrentTable.TableName,
                        AutoGenerateEditButton = true,
                        ShowHeaderWhenEmpty = true,
                        ShowFooter = true,
                        DataSource = dtCurrentTable,
                        Caption = dtCurrentTable.TableName

                    };
                    gvNewGridView.RowCancelingEdit += GvNewGridView_RowCancelingEdit;
                    gvNewGridView.RowUpdating += GvNewGridView_RowUpdating;
                    gvNewGridView.RowEditing += GvNewGridView_RowEditing;
                    gvNewGridView.DataBound += GvNewGridView_DataBound;
                    gvNewGridView.DataBind();
                    Session[gvNewGridView.ID] = gvNewGridView;
                    this.form1.Controls.Add(gvNewGridView);
                    this.form1.Controls.Add(new LiteralControl("<br />"));

                }
                ViewState["Generated"] = "true";
            }
        }

        private void AddInsertFooter(GridView gvTableGrid)
        {
            DataTable dtTable = ((DataTable)gvTableGrid.DataSource);

            gvTableGrid.DataKeyNames = dtTable.PrimaryKey.Select(pk => pk.ColumnName).ToArray();
            //ReplaceForeignKeys();

            //footer for insert
            if (gvTableGrid.EditIndex == -1) // not in edit mode
            {


                if (dtTable.Rows.Count == 0) // the table is empty 
                {
                    dtTable = DBConnection.Instance().GetEmptyDataTable(dtTable);
                    gvTableGrid.DataSource = dtTable;
                    gvTableGrid.DataBind();
                    return;
                }
                Button btnAdd = new Button() { Text = "Add", OnClientClick = "BtnAdd_Click" };
                btnAdd.Click += BtnAdd_Click;

                gvTableGrid.FooterRow.Cells[1].Controls.Add(btnAdd);
                foreach (DataControlFieldCell CurrentField in gvTableGrid.FooterRow.Cells)
                {
                    if (CurrentField.ContainingField is AutoGeneratedField)
                    {
                        string strFieldName = (CurrentField.ContainingField as AutoGeneratedField).DataField;
                        if (strFieldName != "id")
                        {
                            CurrentField.Controls.Add(new TextBox() { ID = strFieldName });
                        }
                    }
                }
            }
        }

        private void BtnAdd_Click(object sender, EventArgs e)
        {
            GridView gvTableGrid = GetGridViewParentFromAddButton(sender as Button);
            GridViewRow row = gvTableGrid.FooterRow;
            DBConnection dbcConnection = DBConnection.Instance();
            if (!dbcConnection.InsertTableRow(gvTableGrid.DataSource as DataTable, row))
            {
                Helper.ShowMessage(ClientScript, GetType(), "error saving");
            }
            gvTableGrid.EditIndex = -1;
            this.UpdateTableGrid(gvTableGrid);
        }

        private GridView GetGridViewParentFromAddButton(Button btnAdd)
        {
            
            GridView gvGridView = ((((btnAdd.Parent as DataControlFieldCell).Parent as GridViewRow).Parent as Table).Parent as GridView);
            return gvGridView;
        }

        private void UpdateTableGrid(GridView gvTableGrid)
        {
            DBConnection dbcConnection = DBConnection.Instance();
            DataTable dtTable = dbcConnection.GetAllDataFromTable((gvTableGrid.DataSource as DataTable).TableName);

            gvTableGrid.DataSource = dtTable;
            gvTableGrid.DataBind();
        }

        private void GvNewGridView_DataBound(object sender, EventArgs e)
        {
            this.AddInsertFooter(sender as GridView);
        }

        private void GvNewGridView_RowEditing(object sender, GridViewEditEventArgs e)
        {
            Response.Write("<h2>Dynamic linkbutton clicked</h2>");
            (sender as GridView).EditIndex = e.NewEditIndex;
            this.UpdateTableGrid(sender as GridView);
        }


        private void GvNewGridView_RowUpdating(object sender, GridViewUpdateEventArgs e)
        {
            GridView gvTableGrid = (sender as GridView);
            GridViewRow row = gvTableGrid.Rows[e.RowIndex];
            int nId = Convert.ToInt32(gvTableGrid.DataKeys[e.RowIndex].Values[0]);
            DBConnection dbcConnection = DBConnection.Instance();
            if (!dbcConnection.UpdateTableRow((gvTableGrid.DataSource as DataTable).TableName, nId, row))
            {
                Helper.ShowMessage(ClientScript, GetType(), "error saving");
            }
            gvTableGrid.EditIndex = -1;
            this.UpdateTableGrid(gvTableGrid);
        }

        private void GvNewGridView_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
        {
            (sender as GridView).EditIndex = -1;
            this.UpdateTableGrid(sender as GridView);
        }
    }
}